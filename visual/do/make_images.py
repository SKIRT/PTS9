#!/usr/bin/env python
# -*- coding: utf8 -*-
# *****************************************************************
# **       PTS -- Python Toolkit for working with SKIRT          **
# **       Â© Astronomical Observatory, Ghent University          **
# *****************************************************************

## \package pts.visual.do.make_images Create RGB images for surface brightness maps generated by SKIRT instruments
#
# This script creates RGB images in PNG format for the surface brightness maps produced by the instruments of
# a SKIRT simulation. The R,G,B color channels can be specified as wavelength values or as broadbands.
#
# The function takes the following arguments:
#  - \em simDirPath (positional string argument): the path to the SKIRT simulation output directory,
#                                                 or "." for the current directory.
#  - \em prefix (string): the prefix of the simulation to handle; by default handles all simulations in the directory.
#  - \em type (string): the final segment of the name of the instrument output files to be handled, excluding the
#        ".fits" suffix (for example, "primaryscattered"); by default the script handles the "total" output files.
#  - \em name (string): a name that will be added to the end of the image file name; defaults to the empty string.
#  - \em colors (string): a string specifying the three wavelength values or broadbands corresponding to each R,G,B
#    color channel of the image; by default the script uses frames with wavelengths as widely apart as possible.
#
# In all cases, the image files are is placed next to the "*.fits" file(s) being represented, with the same filename
# but extended with the specified \em name string and the filename extension replaced by ".png".
#

# -----------------------------------------------------------------

def do( simDirPath : (str, "SKIRT simulation output directory"),
        prefix : (str,"SKIRT simulation prefix") = "",
        type : (str,"type of SKIRT instrument output files to be handled") = "total",
        name : (str,"name segment that will be added to the image file names") = "",
        colors : (str,"three comma-separated wavelength values or broadband names defining the R,G,B colors") = "",
        ) -> "create RGB images for surface brightness maps generated by SKIRT instruments":

    import pts.band as bnd
    import pts.simulation as sm
    import pts.utils as ut
    import pts.visual as vis

    # get the simulations to be handled
    sims = sm.createSimulations(simDirPath, prefix if len(prefix) > 0 else None)

    # parse the colors and handle accordingly

    # no colors given
    if len(colors) == 0:
        if len(name) > 0:
            raise ut.UserError("name argument is not supported when colors are not specified")
        for sim in sims:
            vis.makeRGBImages(sim, fileType=type)
        return

    # get segments
    segments = colors.split(',')
    if len(segments) != 3:
        raise ut.UserError("colors argument must have three comma-separated segments")

    # try wavelengths
    try: wavelengths = [ float(segment) for segment in segments ]
    except ValueError: wavelengths = None
    if wavelengths is not None:
        tuples = { name: wavelengths << sm.unit("micron") }
        for sim in sims:
            vis.makeRGBImages(sim, wavelengthTuples=tuples, fileType=type)
        return

    # try bands
    try: bands = [ bnd.builtinBand(segment) for segment in segments ]
    except ValueError: bands = None
    if bands is not None:
        contributions = [ (bands[0], 1, 0, 0), (bands[1], 0, 1, 0), (bands[2], 0, 0, 1) ]
        for sim in sims:
            vis.makeConvolvedRGBImages(sim, contributions=contributions, fileType=type, name=name)
        return

    raise ut.UserError("colors argument must specify three wavelengths in micron or three broadband names")

# ----------------------------------------------------------------------
