#!/usr/bin/env python
# -*- coding: utf8 -*-
# *****************************************************************
# **       PTS -- Python Toolkit for working with SKIRT          **
# **       Â© Astronomical Observatory, Ghent University          **
# *****************************************************************

## \package pts.storedtable.do.fsps_with_lines_to_stored_table Create FSPS-generated SED family including emission lines as stored table
#
# This script serves as an example of how to create a SKIRT stored table for a family of SEDs representing
# single stellar populations generated by the FSPS code, including nebular continuum and line emission.
# This enables users to prepare SSP SED families with nebular emission for use with SKIRT.
# It is recommended to copy this script and adjust it to suit your specific needs.
#
# References: Conroy, Gunn, & White 2009, ApJ
#             Conroy & Gunn 2010, ApJ
#             Byler et al. 2017, ApJ
#
# --------------------------------------------------------------------------------------------------
#
# This script invokes the FSPS code to create a set of SSP emission templates including nebular
# emission as described by Byler et al. 2017. The results are saved in a single stored table (.stab)
# file that can be used as input for the FileSSPSEDFamily class in SKIRT 9.
#
# Dependencies:
#   - numpy
#   - a version of the Fortran FSPS code that includes Cloudy models (https://github.com/cconroy20/fsps)
#   - the fsps python wrapper for the FSPS library (https://dfm.io/python-fsps)
#   - PTS9 for storing the results in SKIRT format
#
# According to Byler et al. 2017, the SSPs with corresponding nebular emission were created using
# Kroupa's IMF, the BaSeL 3.1 stellar library, and Padova 2007 isochrones. However, this example uses
# an FSPS install that use MIST isochrones. Thus we assume Zsolar = 0.0142 corresponding to these
# isochrones.
#
# The parameters needed to identify each SSP are age t, metallicity Z, and a dimensionless
# ionization parameter U defined by Eq. (2) of Byler et al. 2017.
#
# --------------------------------------------------------------------------------------------------

# define the script body inside a function to avoid execution at the top level
def do() -> "Create FSPS-generated SED family including emission lines as stored table":
    import numpy as np
    import fsps
    import pts.storedtable.io as stab

    # the file path for the .stab output file (here placed in the current directory)
    stabPath = "FSPS_Kroupa_With_Lines.stab"

    # the metallicity and ionization parameter grids
    Zsun = 0.0142
    logZv = [-2.5, -2, -1.5, -1, -0.6, -0.4, -0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.5]
    logUv = [-4, -3.5, -3, -2.5, -2, -1.5, -1]

    # initialize the ssp object (it is advised to do this only once)
    print("Initializing FSPS...", flush=True)
    sp = fsps.StellarPopulation(compute_vega_mags = False,
                                zcontinuous=1,               # Type of interpolation for metallicity
                                sfh=0,                       # SSPs
                                imf_type=2,                  # Kroupa IMF
                                add_dust_emission=False,     # Turn off dust emission
                                add_neb_emission=True,       # Turn on nebular emission
                                cloudy_dust=False,           # Exclude dust from nebular emission
                                logzsol=-2,                  # Stellar metallicity
                                gas_logz=-2,                 # Gas metallicity (must be the same as stellar)
                                gas_logu=-4)                 # Ionization parameter

    # perform a dummy calculation to get the wavelength and age grids
    # (if we don't specify the age, a data cube with SSPs for a range of ages is created)
    print("Determining grids...", flush=True)
    wv, _ = sp.get_spectrum(peraa=True)     # wavelengths in Angstrom
    logtv = sp.log_age
    tv = 10.**logtv                         # ages in year
    Zv = Zsun * 10.**np.array(logZv)        # metallicities from log(Z/Zsun)
    Uv = 10.**np.array(logUv)

    # allocate hypercube for the luminosities
    L = np.zeros((len(wv), len(Zv), len(tv), len(Uv)))

    # perform calculations for all metallicities and ionization parameters
    for iZ, logZ in enumerate(logZv):
        for iU, logU in enumerate(logUv):
            print("Calculating spectra for logZ={} and logU={}...".format(logZ, logU), flush=True)

            # modify parameters in the sp object
            sp.params['logzsol'] = logZ
            sp.params['gas_logz'] = logZ
            sp.params['gas_logu'] = logU

            # get specific luminosities in Lsun/Angstrom and put them into the hypercube
            _, Lv = sp.get_spectrum(peraa=True)
            L[:, iZ, :, iU] = Lv.T

    # convert from input units Lsun/Angstrom to output units W/m
    L *= 3.848e26 * 1e10
    wv *= 1e-10

    # write the stored table
    print("Writing stored table file {}...".format(stabPath), flush=True)
    stab.writeStoredTable(stabPath,
            ['lambda','Z','t','U'], ['m','1','yr','1'], ['log','log','log','log'], [wv,Zv,tv,Uv],
            ['Llambda'], ['W/m'], ['log'], [L])
    print("Done.", flush=True)

# --------------------------------------------------------------------------------------------------

# remove the "#" in front of the next line to perform the script body
#do()

# --------------------------------------------------------------------------------------------------
